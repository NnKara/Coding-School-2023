@page "/customerList"
@inject HttpClient httpClient
@using Session_30.Shared;
@using Session_30.Shared.CustomerDto;
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
<PageTitle>Fuel Station</PageTitle>


<h3>Customers</h3>

@if (isLoading) {
    <div class="spinner-border text-success" role="status">
  <span class="sr-only"></span>
</div>
    <p style="color:purple">Loading...</p>
} else {
    <button class="btn btn-success btn-lg main-btn" @onclick="CreateItem">Create New +</button>
      <table class="table table-striped table-hover">
          <thead>
              <tr>
                  <th>Name</th>
                  <th>Surname</th>
                  <th>Card Number</th>
                  <th>Actions</th>
              </tr>
          </thead>
          <tbody>
            @foreach (var customer in customers) {
                <tr>
                    <td>@customer.CustomerName</td>
                    <td>@customer.CustomerSurname</td>
                    <td>@customer.CardNumber</td>               
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(customer)">Edit</button>
                        <button class="btn btn-primary" @onclick="()=> DetailItem(customer)">Details</button>                     
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(customer)">Delete</button>
                    </td>
                </tr>
            }
          </tbody>
      </table>
}

@code {


    private List<CustomerListDto> customers = new();
    bool isLoading { get; set; }=true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }


    private async Task LoadItemsFromServer() {
        customers = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
    }

    private void CreateItem() {
        navigationManager.NavigateTo("customerList/edit");
    }

    private void EditItem(CustomerListDto customer) {
        navigationManager.NavigateTo($"customerlist/edit/{customer.CustomerID}");
    }

    private async Task DeleteItem(CustomerListDto customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item.Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"customer/{customer.CustomerID}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }

    private void DetailItem(CustomerListDto customer) {
        navigationManager.NavigateTo($"customerList/details/{customer.CustomerID}");
    }

}
