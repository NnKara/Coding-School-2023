@page "/itemList"
@inject HttpClient httpClient
@using Session_30.Shared;
@using Session_30.Shared.ItemDto;
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
<PageTitle>Fuel Station</PageTitle>



<h3>Items</h3>

@if (isLoading) {
    <div class="spinner-border text-success" role="status">
        <span class="sr-only"></span>
    </div>
    <p style="color:purple">Loading...</p>
} else {
    <button class="btn btn-success btn-lg main-btn" @onclick="CreateItem">Create New +</button>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Type</th>
                <th>Cost</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items) {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Description</td>
                    <td>@item.ItemType.ToString()</td>
                    <td>@item.Cost</td>
                    <td>@item.Price</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(item)">Edit</button>
                        <button class="btn btn-primary" @onclick="()=> DetailItem(item)">Details</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {


    private List<ItemListDto> items = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }


    private async Task LoadItemsFromServer() {
        items = await httpClient.GetFromJsonAsync<List<ItemListDto>>("item");
    }

    private void CreateItem() {
        navigationManager.NavigateTo("itemList/edit");
    }

    private void EditItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemList/edit/{item.ItemID}");
    }

    private async Task DeleteItem(ItemListDto item) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item.Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"item/{item.ItemID}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }

    private void DetailItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemList/details/{item.ItemID}");
    }

}

